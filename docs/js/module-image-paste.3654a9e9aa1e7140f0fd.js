"use strict";(self.webpackChunkOpenGraphica=self.webpackChunkOpenGraphica||[]).push([[2677],{23233:(e,a,t)=>{t.r(a),t.d(a,{promptClipboardReadPermission:()=>d,pasteFromEditorCopyBuffer:()=>u,paste:()=>f});var i=t(50361),r=t.n(i),n=t(52294),s=t(19971),o=t(8778),p=t(67340),c=t(93249),l=t(75930);async function d(){try{const{state:e}=await navigator.permissions.query({name:"clipboard-read"});return"granted"===e}catch(e){return!("TypeError: 'clipboard-read' (value of 'name' member of PermissionDescriptor) is not a valid value for enumeration PermissionName."!==e.toString()||!window.ClipboardItem)}}async function u(){const e=p.default.state.selectedLayerIds[0];o.Z.dispatch("runAction",{action:new c.x("pasteLayers","action.pasteLayers",s.default.state.clipboardBufferLayers.map((a=>{delete a.id;const t=p.default.state.layers[0];return a.name=(0,p.ensureUniqueLayerSiblingName)(e??t?t.id:void 0,a.name),new l.D(r()(a),null==e?"top":"above",e)})))})}async function f(){if(await d()&&navigator.clipboard?.read){const e=await navigator.clipboard.read();for(const a of e){let e;a.types.includes("image/png")&&(e=await a.getType("image/png"));let i=!0;if(e){const a=await(0,n.Y)(e);i=s.default.state.clipboardBufferImageHash!==a}else i=!1;if(i&&e){const{openFromFileList:a}=await Promise.all([t.e(8107),t.e(8341),t.e(8658)]).then(t.bind(t,24786));await a([new File([e],"image.png")],{insert:!0})}else{const{pasteFromEditorCopyBuffer:e}=await Promise.resolve().then(t.bind(t,23233));await e()}}}else await u()}}}]);